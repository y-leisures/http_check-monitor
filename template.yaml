AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  bms-monitor

  SAM Template for bms-monitor

Metadata:
  AWS::ServerlessRepo::Application:
    Name: BmsMonitorBySam
    Description: this application is for private
    SpdxLicenseId: Apache-2.0
    Author: Yukihiro Okada
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ["bms", "private"]
    SemanticVersion: 0.1.0
    HomePageUrl: https://github.com/y-leisures/http_check-monitor
    SourceCodeUrl: https://github.com/y-leisures/http_check-monitor

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Tags:
      cdk: "false"
      sam: "true"
      system: bms
      repository: https://github.com/y-leisures/http_check-monitor

Parameters:
  Stage:
    Type: String
    AllowedValues:
      - development
      - staging
      - production
    Default: development
    Description: Stage in which the application will be deployed. Allowed values [development, staging, production]

Mappings:
  StageMapping:
    development:
      Alias: dev
      LogLevelMapping: DEBUG
      FunctionName: "bms-dev-http-monitor"
    staging:
      Alias: stg
      LogLevelMapping: DEBUG
      FunctionName: "bms-stg-http-monitor"
    production:
      Alias: prod
      LogLevelMapping: INFO
      FunctionName: "bms-prod-http-monitor"

Resources:
  BmsMonitoringLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "bms-http-monitoring-role-${Stage}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Path: /
      Policies:
        - PolicyName: AllowToCreateLogGroup
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: "arn:aws:logs:us-east-1:949140100595:*"
        - PolicyName: AllowToSendLogToGroup
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:us-east-1:949140100595:log-group:/aws/lambda/monitor_bms:*"
        - PolicyName: AllowToPublishToSns
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: "arn:aws:sns:us-east-1:949140100595:NotifyMe"
        - PolicyName: AllowToGetSecretValue
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"
        - PolicyName: AllowToHandleObjectOnS3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: "arn:aws:s3:::y-bms-tokyo/http_monitor/*"
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                Resource: "arn:aws:s3:::y-bms-tokyo"

  BmsMonitoringSnsTopic:
    # see: https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html
    Type: AWS::SNS::Topic
    Properties:
      FifoTopic: false
      Subscription:
        - Endpoint: callistoiv+aws@gmail.com
          Protocol: EMAIL
      Tags:
        - Key: cdk
          Value: "false"
        - Key: sam
          Value: "true"
      TopicName: !Sub "bms-monitoring-${Stage}"

  BmsPythonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "bms-common-function-layer-${Stage}"
      ContentUri: layers/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.9

  BmsCheckWebsitePeriodicallyFun:
    Type: AWS::Serverless::Function
    Properties:
#      FunctionName: !Sub
#        - "bms-${Alias}-http-monitor"
#        - { "Alias": !FindInMap [StageMapping, !Ref Stage, Alias] }
      FunctionName: !Sub "bms-http-monitor-${Stage}"
      CodeUri: check_website/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref BmsPythonLayer
      # Role: arn:aws:iam::949140100595:role/service-role/monitor_bms-role-zswvtb9u
      Role: !GetAtt BmsMonitoringLambdaRole.Arn
      Events:
        # see: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-schedule.html
        # see: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-schedulev2.html
        Event1:
          Type: ScheduleV2
          Properties:
            Name: !Sub "bms-http-monitor-scheduled-trigger-${Stage}"
            ScheduleExpression: "rate(60 minutes)"
      Environment:
        Variables:
          MONITOR_URL: http://b-ms.info/
          MONITORING_TABLE: !Sub "bms-monitoring-events-${Stage}"
          SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
      # see: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-eventinvokeconfiguration.html
      EventInvokeConfig:
        # MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 1
        DestinationConfig:
          OnFailure:
            Type: SNS
            # Destination: arn:aws:sns:us-east-1:949140100595:NotifyMe
            # Destination: !GetAtt BmsMonitoringSnsTopic.Arn
            Properties:
              Topic:
                Ref: BmsMonitoringSnsTopic
          # OnSuccess:
          #   Type: SNS
          #   Destination:
          #     Ref: DestinationSNS       # Arn of an SNS topic declared in the tempate file

  BmsMonitoringLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${BmsCheckWebsitePeriodicallyFun}
      RetentionInDays: 30

# see: https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
# see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
Outputs:
  BmsCheckWebsitePeriodicallyFun:
    Description: "CheckWebsite Periodically Lambda Function ARN"
    Value: !GetAtt BmsCheckWebsitePeriodicallyFun.Arn

  BmsMonitoringLambdaRole:
    Value: !GetAtt BmsMonitoringLambdaRole.Arn

  # BmsMonitoringSnsTopic:
  #   Description: "BmsMonitoringSnsTopic SNS Topic ARN"
  #   Value: !GetAtt BmsMonitoringSnsTopic.Arn
